plugins {
    id 'java-library'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
    withJavadocJar()
    withSourcesJar()
}

group = 'dev.rocksqueue'
version = '0.1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    api 'org.rocksdb:rocksdbjni:10.2.1'

    // SLF4J logging framework
    implementation 'org.slf4j:slf4j-api:2.0.9'
    implementation 'ch.qos.logback:logback-classic:1.4.11'

    implementation 'com.fasterxml.jackson.core:jackson-databind:2.17.1'
    implementation 'com.fasterxml.jackson.core:jackson-annotations:2.17.1'
    implementation 'com.fasterxml.jackson.core:jackson-core:2.17.1'

    // Lombok
    compileOnly 'org.projectlombok:lombok:1.18.32'
    annotationProcessor 'org.projectlombok:lombok:1.18.32'

    testCompileOnly 'org.projectlombok:lombok:1.18.32'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.32'

    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.2'
}

test {
    useJUnitPlatform()
    // RocksDB JNI can crash when multiple Gradle test forks run concurrently.
    // Serialize test execution to a single fork to avoid native pthread issues.
    maxParallelForks = 1
    // Also fork a fresh JVM for each test class to avoid native state sharing across tests
    forkEvery = 1
}

// Dedicated JFR-enabled test task for throughput profiling
tasks.register('throughputJfr', Test) {
    useJUnitPlatform()
    // Only run the smoke throughput test
    filter {
        includeTestsMatching 'dev.rocksqueue.integration.QueueThroughputSmokeTest'
    }
    // Start Java Flight Recorder and dump on exit
    jvmArgs '-XX:StartFlightRecording=filename=build/throughput.jfr,dumponexit=true,settings=profile'

    // Print stdout from the test to the console
    testLogging {
        events "passed", "skipped", "failed", "standardOut"
        showStandardStreams = true
    }
}

jar {
    manifest {
        attributes(
                'Implementation-Title': 'rocksqueue',
                'Implementation-Version': version
        )
    }
}
